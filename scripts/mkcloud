#!/bin/bash

CVOL=/dev/vdb
precleanup=true
adminip=192.168.124.10
cloudsource=${cloudsource:-Beta1}

if [ ! -e qa_crowbarsetup.sh ] ; then
  echo "Thank you for using $0."
  echo "For proper functionality you also need to copy the script qa_crowbarsetup.sh here."
  exit 87
fi

function cleanup()
{
	# cleanup leftover from last run
  if $precleanup ; then
    for n in admin node1 node2 ; do virsh destroy cloud-$n ; virsh undefine cloud-$n ; done ; virsh net-destroy cloud-admin ; rclibvirtd stop ; killall -9 libvirtd ; ifdown virbr1 ; brctl delbr virbr1 ; tunctl -d virbr1-nic ; killall dnsmasq ; iptables -F FORWARD
  fi
}

function prepare()
{
  zypper --non-interactive in --no-recommends libvirt kvm lvm2 wget bridge-utils dnsmasq netcat-openbsd

  grep -q NumberOfPasswordPrompts ~/.ssh/config 2>/dev/null || cat > ~/.ssh/config <<EOSSH
NumberOfPasswordPrompts 0
UserKnownHostsFile /dev/null
StrictHostKeyChecking no
EOSSH

  pvcreate $CVOL
  vgcreate cloud $CVOL
  vgchange -ay cloud # for later boots

  lvcreate -n admin -L 15G cloud
  for i in 1 2 ; do
    lvcreate -n node$i -L 20G cloud
  done
  cd /tmp
  wget -nc http://openqa.suse.de/sle/img/SP2-64up.img.gz
  gzip -cd SP2-64up.img.gz > /dev/cloud/admin

  # make a bigger partition 2
  echo -e "d\n2\nn\np\n2\n\n\na\n2\nw" | fdisk /dev/cloud/admin
  losetup -o $(expr 2056192 \* 512) /dev/loop0 /dev/cloud/admin
  fsck -f /dev/loop0
  resize2fs /dev/loop0
  sync
  losetup -d /dev/loop0
}

function sshrun()
{
  ssh root@$adminip "$@"
}

function instadmin()
{
  echo "Creating key for controlling our VMs..."
  [ -e ~/.ssh/id_dsa ] || ssh-keygen -t dsa -f ~/.ssh/id_dsa -N ""
  echo "Injecting public key into image..."
  pubkey=`cut -d" " -f2 ~/.ssh/id_dsa.pub`
  mount -o loop,offset=$(expr 2056192 \* 512) /dev/cloud/admin /mnt
  mkdir -p /mnt/root/.ssh
  grep -q $pubkey /mnt/root/.ssh/authorized_keys2 2>/dev/null || cat ~/.ssh/id_dsa.pub >> /mnt/root/.ssh/authorized_keys2
  umount /mnt

  cat > /tmp/cloud-admin.xml <<EOLIBVIRT
  <domain type='kvm'>
    <name>cloud-admin</name>
    <uuid>169738f2-63a1-3fef-2ee8-1fef03498574</uuid>
    <memory>2097152</memory>
    <currentMemory>2097152</currentMemory>
    <vcpu>1</vcpu>
    <os>
      <type arch='x86_64' machine='pc-0.15'>hvm</type>
      <boot dev='hd'/>
    </os>
    <features>
      <acpi/>
      <apic/>
      <pae/>
    </features>
    <clock offset='utc'/>
    <on_poweroff>preserve</on_poweroff>
    <on_reboot>restart</on_reboot>
    <on_crash>restart</on_crash>
    <devices>
      <emulator>/usr/bin/qemu-kvm</emulator>
      <disk type='block' device='disk'>
        <driver name='qemu' type='raw'/>
        <source dev='/dev/cloud/admin'/>
        <target dev='vda' bus='virtio'/>
        <address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0'/>
      </disk>
      <interface type='network'>
        <mac address='52:54:00:77:77:70'/>
        <source network='cloud-admin'/>
        <model type='virtio'/>
        <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>
      </interface>
      <serial type='pty'>
        <target port='0'/>
      </serial>
      <console type='pty'>
        <target type='serial' port='0'/>
      </console>
      <input type='mouse' bus='ps2'/>
      <graphics type='vnc' port='-1' autoport='yes'/>
      <video>
        <model type='cirrus' vram='9216' heads='1'/>
        <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0'/>
      </video>
      <memballoon model='virtio'>
        <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0'/>
      </memballoon>
    </devices>
  </domain>
EOLIBVIRT

  # dont specify range
  # this allows to use the same network for cloud-nodes that get DHCP from crowbar
  # doc: http://libvirt.org/formatnetwork.html
  cat > /tmp/cloud-admin.net.xml <<EOLIBVIRTNET
  <network>
    <name>cloud-admin</name>
    <uuid>76b08f53-4fe0-3bb6-8220-d4cfc7b23423</uuid>
    <bridge name='virbr1' stp='on' delay='0' />
    <mac address='52:54:00:AB:B1:77'/>
    <ip address='192.168.124.1' netmask='255.255.255.0'>
      <dhcp>
        <host mac="52:54:00:77:77:70" name="crowbar.example.com" ip="$adminip"/>
      </dhcp>
    </ip>
    <forward mode='nat'>
    </forward>
  </network>
EOLIBVIRTNET


  # configure bridge
  if [ ! -e /etc/sysconfig/network/ifcfg-br1 ] ; then
          echo "net.ipv4.conf.all.proxy_arp = 1" >> /etc/sysctl.conf
          cat >/etc/sysconfig/network/ifcfg-br1 <<EOF
BOOTPROTO='static'
BRIDGE='yes'
BRIDGE_FORWARDDELAY='0'
BRIDGE_PORTS=''
BRIDGE_STP='off'
BROADCAST=''
ETHTOOL_OPTIONS=''
IPADDR='192.168.55.1/24'
MTU=''
NETMASK=''
NETWORK=''
REMOTE_IPADDR=''
STARTMODE='onboot'
USERCONTROL='no'
EOF
    ifup br1
  fi

  modprobe kvm-amd
  insserv libvirtd
  rclibvirtd start
  echo "Waiting for libvirt startup..."
  sleep 5
  [ -e /etc/libvirt/qemu/networks/cloud-admin.xml ] || virsh net-create /tmp/cloud-admin.net.xml
  [ -e /etc/libvirt/qemu/cloud-admin.xml ] || virsh create /tmp/cloud-admin.xml

  #sleep 60 # time to boot up
  #adminip=`grep 52:54:00:77:77:70 /var/lib/libvirt/dnsmasq/cloud-admin.leases | cut -d" " -f3`
  echo "waiting for crowbar admin VM to become reachable"
  n=150 ; while test $n -gt 0 && ! ping -q -c 1 -w 1 $adminip >/dev/null ; do
    n=$(expr $n - 1)
    echo -n "."
  done
  echo 'iptables -t nat -F PREROUTING ; for i in 22 3000 4000 ; do iptables -I FORWARD -p tcp --dport $i -j ACCEPT ; iptables -t nat -I PREROUTING -p tcp --dport $(expr $i + 2000) -j DNAT --to-destination 192.168.124.10:$i ; done' >> /etc/init.d/boot.local
  /etc/init.d/boot.local

  n=150 ; while test $n -gt 0 && ! nc -z $adminip 22 ; do
    sleep 1
    n=$(expr $n - 1)
    echo -n "."
  done

  if [ $n = 0 ] ; then
    echo "admin VM not reachable - something must have gone wrong... exiting"
    exit 57
  fi

  echo "waiting some more for sshd+named to start"
  sleep 25
  echo "connecting to crowbar admin server at $adminip"
  scp qa_crowbarsetup.sh root@$adminip:
  sshrun "echo `hostname` > cloud ; cloudsource=$cloudsource installcrowbar=1 bash -x qa_crowbarsetup.sh virtual"
}



function instcompute()
{
  for i in 1 2 ; do
    cat > /tmp/cloud-node$i.xml <<EOLIBVIRT
<domain type='kvm'>
  <name>cloud-node$i</name>
  <uuid>169738f2-63b$i-3fef-2ee8-1fef03498574</uuid>
  <memory>2097152</memory>
  <currentMemory>2097152</currentMemory>
  <vcpu>1</vcpu>
  <os>
    <type arch='x86_64' machine='pc-0.15'>hvm</type>
  </os>
  <features>
    <acpi/>
    <apic/>
    <pae/>
  </features>
  <clock offset='utc'/>
  <on_poweroff>preserve</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>restart</on_crash>
  <devices>
    <emulator>/usr/bin/qemu-kvm</emulator>
    <disk type='block' device='disk'>
      <driver name='qemu' type='raw'/>
      <source dev='/dev/cloud/node$i'/>
      <target dev='vda' bus='virtio'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0'/>
      <boot order='2'/>
    </disk>
    <interface type='network'>
      <mac address='52:54:00:77:77:7$i'/>
      <source network='cloud-admin'/>
      <model type='virtio'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>
      <boot order='1'/>
    </interface>
    <serial type='pty'>
      <target port='0'/>
    </serial>
    <console type='pty'>
      <target type='serial' port='0'/>
    </console>
    <input type='mouse' bus='ps2'/>
    <graphics type='vnc' port='-1' autoport='yes'/>
    <video>
      <model type='cirrus' vram='9216' heads='1'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0'/>
    </video>
    <memballoon model='virtio'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0'/>
    </memballoon>
  </devices>
</domain>
EOLIBVIRT

    virsh create /tmp/cloud-node$i.xml
  done

  scp qa_crowbarsetup.sh root@$adminip:
  sshrun "cloudsource=$cloudsource allocate=1 bash -x qa_crowbarsetup.sh virtual"

  echo "Waiting for the installation of the nodes ..."
  sshrun '
  for i in 1 2 ; do
    echo -n "Waiting for node $i... "
    while ! ssh -o NumberOfPasswordPrompts=0 -o "StrictHostKeyChecking no" 192.168.124.8$i rpm -q yast2-core 2>/dev/null 1>&2; do
      sleep 10
      echo -n "."
    done
    echo "node $i ready"
  done
  '

}


function proposal()
{
  scp qa_crowbarsetup.sh root@$adminip:
  sshrun "cloudsource=$cloudsource proposal=1 bash -x qa_crowbarsetup.sh virtual"
}

## MAIN ##


case $1 in
  instadmin)
    cleanup
    #prepare
    instadmin
  ;;
  instcompute)
    instcompute
  ;;
  proposal)
    proposal
  ;;
  prepare)
    prepare
  ;;
  cleanup)
    cleanup
  ;;
  all)
    cleanup
    prepare
    instadmin
    instcompute
    proposal
  ;;
  *) echo "$0 all|cleanup|prepare|instadmin|instcompute|proposal";
  ;;
esac
