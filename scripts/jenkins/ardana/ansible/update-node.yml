---
# Need to enable allowVendorChange to allow packages to be updated to D:C:8 and D:C:8:S
- name: Enable allowVendorChange on the host
  shell: |
    ansible '{{ ansible_node }}' -b -a \
      "sed -i 's/^#[ ]*solver.allowVendorChange = false/solver.allowVendorChange = true/g' /etc/zypp/zypp.conf"
  args:
    chdir: /var/lib/ardana/scratch/ansible/next/ardana/ansible
  become: true
  become_user: ardana
  when: cloudsource in ['SUSE-OpenStack-Cloud-8-devel', 'SUSE-OpenStack-Cloud-8-devel-staging']

# Need to change repo type to yast2 to allow packages to be updated to D:C:8 and D:C:8:S
- name: Change Cloud repo type to yast2
  shell: |
    ansible '{{ ansible_node }}' -b -a \
      "sed -i 's/^type=rpm-md/type=yast2/g' /etc/zypp/repos.d/Cloud.repo"
  args:
    chdir: /var/lib/ardana/scratch/ansible/next/ardana/ansible
  become: true
  become_user: ardana
  when: cloudsource in ['SUSE-OpenStack-Cloud-8-devel', 'SUSE-OpenStack-Cloud-8-devel-staging']

# Accounting for the update scenario which starts from a point
# where the update helper playbooks are not yet present (i.e.
# have not yet been installed via ardana-ansible package updates).
# In this case, the ardana-update-pkgs.yml playbook cannot be used
# to update the target node, we need to update the CLM packages
# first, directly with zypper.
- name: Check that the update helper playbooks exist
  stat:
    path: /var/lib/ardana/scratch/ansible/next/ardana/ansible/ardana-update-pkgs.yml
  register: _helper_playbooks_stat_result

- name: Set fact to update the CLM
  set_fact:
    update_clm: "{{ not _helper_playbooks_stat_result.stat.exists | bool }}"

- name: Set fact to enforce a serviceÂ update for all nodes
  set_fact:
    enforce_service_update: true
  when: update_clm | bool

- name: Update packages on the deployer
  include: _install-pkg-updates.yml
  vars:
    zypper_update_method: "{{ update_method }}"
    zypper_update_gpg_checks: "{{ update_gpg_checks }}"
    zypper_update_licenses_agree: "{{ update_gpg_checks }}"
    zypper_update_include_reboot_patches: "{{ update_include_reboot_patches }}"
  when: update_clm

- name: Update CLM services
  include: _update-clm.yml
  when: update_clm

- name: Check that the update helper playbooks have been installed
  stat:
    path: /var/lib/ardana/scratch/ansible/next/ardana/ansible/ardana-update-pkgs.yml
  register: _helper_playbooks_stat_result
  when: update_clm

- name: Fail if the update helper playbooks have not yet been installed
  fail:
    msg: |
      The update helper playbooks (e.g. ardana-update-pkgs.yml) have not
      been installed on the deployer. These playbooks are required to
      continue testing the update workflow.
  when: update_clm and
        not _helper_playbooks_stat_result.stat.exists | bool

# Refresh zypper repositories
- name: Refresh zypper repos
  shell: |
    ansible '{{ ansible_node }}' -b -a \
      "zypper --non-interactive --gpg-auto-import-keys refresh"
  args:
    chdir: /var/lib/ardana/scratch/ansible/next/ardana/ansible
  become: true
  become_user: ardana

- name: Update packages on the target node
  shell: |
    ansible-playbook -vvv -i hosts/verb_hosts ardana-update-pkgs.yml \
      --limit {{ ansible_node }} \
      -e \
        "zypper_update_method={{ update_method }}
         zypper_update_gpg_checks={{ update_gpg_checks }}
         zypper_update_licenses_agree={{ update_gpg_checks }}
         zypper_update_include_reboot_patches={{ update_include_reboot_patches }}"
  args:
    chdir: /var/lib/ardana/scratch/ansible/next/ardana/ansible
  environment:
    SKIP_REPO_CHECKS: 1
  become: true
  become_user: ardana

- name: Get update status on the target node
  shell: |
    ansible-playbook -vvv -i hosts/verb_hosts ardana-update-status.yml \
      --limit {{ ansible_node }} \
      -e update_status_brief=true | grep "Pending update actions:"
  args:
    chdir: /var/lib/ardana/scratch/ansible/next/ardana/ansible
  become: true
  become_user: ardana
  register: _ardana_update_status

- name: Check if CLM needs to be updated
  set_fact:
    pending_clm_update: "{{ 'CLM update' in _ardana_update_status.stdout }}"
  when: node_is_deployer

- name: Check if services need to be updated
  set_fact:
    pending_service_update: "{{ 'service update' in _ardana_update_status.stdout or
                                enforce_service_update | default(false) | bool }}"

- name: Check if node needs to be rebooted
  set_fact:
    pending_system_reboot: "{{ 'system reboot' in _ardana_update_status.stdout or
                               (node_is_deployer and update_clm) }}"

- name: Update CLM services
  include: _update-clm.yml
  when: node_is_deployer and pending_clm_update

- name: Update services
  shell: |
    ansible-playbook -vvv -i hosts/verb_hosts ardana-update.yml \
      --limit {{ ansible_node }}
  args:
    chdir: /var/lib/ardana/scratch/ansible/next/ardana/ansible
  environment:
    SKIP_REPO_CHECKS: 1
  become: true
  become_user: ardana
  when: pending_service_update

- include: reboot-node.yml
  when: pending_system_reboot
