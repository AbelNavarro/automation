<?xml version="1.0" encoding="UTF-8"?>
<matrix-project>
  <actions/>
  <description>run unittests on different workers with different base-OS and different library versions</description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers class="vector">
    <hudson.triggers.TimerTrigger>
      <spec>H */6 * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <axes>
    <hudson.matrix.TextAxis>
      <name>component</name>
      <values>
        <string>openstack-ceilometer</string>
        <string>openstack-cinder</string>
        <string>openstack-dashboard</string>
        <string>openstack-glance</string>
        <string>openstack-heat</string>
        <string>openstack-heat-cfntools</string>
        <string>openstack-keystone</string>
        <string>openstack-nova</string>
        <string>openstack-quantum</string>
        <string>openstack-swift</string>
        <string>python-cinderclient</string>
        <string>python-ceilometerclient</string>
        <string>python-glanceclient</string>
        <string>python-heatclient</string>
        <string>python-keystoneclient</string>
        <string>python-novaclient</string>
        <string>python-quantumclient</string>
        <string>python-swiftclient</string>
        <string>python-oslo.config</string>
      </values>
    </hudson.matrix.TextAxis>
    <hudson.matrix.LabelAxis>
      <name>distribution</name>
      <values>
        <string>folsom-openSUSE-12.2</string>
        <string>grizzly-SLE-11-SP3</string>
        <string>grizzly-openSUSE-12.2</string>
        <string>grizzly-openSUSE-12.3</string>
        <string>master-openSUSE-12.3</string>
        <string>master-SLE-11-SP2</string>
        <string>master-SLE-11-SP3</string>
      </values>
    </hudson.matrix.LabelAxis>
  </axes>
  <combinationFilter>! ( ["folsom-openSUSE-12.2"].contains(distribution) &amp;&amp; ["openstack-ceilometer", "openstack-heat", "python-oslo.config", "python-ceilometerclient", "openstack-heat-cfntools", ].contains(component) )</combinationFilter>
  <builders>
    <hudson.tasks.Shell>
      <command># zypper in osc
# provide .oscrc


# fetch the latest automation updates
mkdir -p ~/bin
[ -e ~/bin/update_automation ] || wget -O ~/bin/update_automation https://raw.github.com/SUSE-Cloud/automation/master/scripts/jenkins/update_automation &amp;&amp; chmod a+x ~/bin/update_automation
update_automation openstack-unittest-testconfig.pl

# package is a reserved name in groovy (see combination filter)
package=$component

# basic configuration
OSC_RC="$OSC_RC -A https://api.opensuse.org"
OSC_ARCH=x86_64

case $distribution in
  *-SLE-11-SP2) OSC_DIST=SLE_11_SP2
             ;;
            ###(dmueller): change to SP3 when available           
  *-SLE-11-SP3) OSC_DIST=SLE_11_SP2
             ;;
  *-openSUSE-12.3) OSC_DIST=openSUSE_12.3
             ;;
  *-openSUSE-12.2) OSC_DIST=openSUSE_12.2
             ;;
esac

# map label to OBS project
case $distribution in
  master-*)  dist=Cloud:OpenStack:Master
          ;;
  folsom-*)  dist=Cloud:OpenStack:Folsom:Staging
          ;;
  grizzly-*) dist=Cloud:OpenStack:Grizzly:Staging
          ;;
esac

set -e
# make sure we have access to all needed packages
cloudrepo=http://download.opensuse.org/repositories/${dist//:/:\/}/${OSC_DIST}/
zypper ar -f $cloudrepo cloud || true
zypper --gpg-auto-import-keys ref
zypper -n dup --from cloud
if [[ $dist =~ ":Staging" ]] ; then
  zypper ar -f ${cloudrepo/:\/Staging/} cloud-full || true
  zypper --gpg-auto-import-keys ref
  zypper -n dup --from cloud-full
fi


zypper rr dlp || true


# source config of the test
eval `openstack-unittest-testconfig.pl $dist unittest $package`


# workaround keystone timezone problem 6596 (bmwiedemann)
export TZ=UTC

################
# run the test #
################

# default test command
[ -z "$TESTCMD" ] &amp;&amp; TESTCMD="nosetests -v"


EXTRAPKGS=""
# example:
# [ "$package" = "openstack-nova" ] &amp;&amp; EXTRAPKGS="python-xxx"
[ "$package" = "python-quantumclient" ] &amp;&amp; EXTRAPKGS="openstack-quantum"

zypper --non-interactive in -y osc

rm -rf $package
mkdir -p $package
cd $package
for p in $package $EXTRAPKGS ; do
    osc $OSC_RC getbinaries -d ./ $dist $p $OSC_DIST $OSC_ARCH
done
zypper --non-interactive ref
zypper --non-interactive rm -y $package $EXTRAPKGS || true
zypper --non-interactive in -y --force `ls *rpm`

if test -d /usr/share/${package}-test/; then
  cd /usr/share/${package}-test/
else
  cd /var/lib/${package}-test/
fi

test_exitcode=1

echo "=== Running SETUPCMD ===" &gt; /dev/null
eval "$SETUPCMD"
echo "=== Running TESTCMD ===" &gt; /dev/null
eatmydata=/usr/bin/eatmydata
test -x $eatmydata || eatmydata=""
perl -e "alarm 60*60 ; exec '$eatmydata $TESTCMD'"
test_exitcode=$?

echo "=== Running TEARDOWNCMD ===" &gt; /dev/null
eval "$TEARDOWNCMD" || true

exit $test_exitcode</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.5.3"/>
  </buildWrappers>
  <executionStrategy class="hudson.matrix.DefaultMatrixExecutionStrategyImpl">
    <runSequentially>false</runSequentially>
  </executionStrategy>
</matrix-project>
